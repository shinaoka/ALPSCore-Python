# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gf')
    _gf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gf', [dirname(__file__)])
        except ImportError:
            import _gf
            return _gf
        try:
            _mod = imp.load_module('_gf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gf = swig_import_helper()
    del swig_import_helper
else:
    import _gf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import alps.hdf5

mesh_types = []
mesh_types.append(('alps::gf::legendre_mesh', 'LegendreMesh'))

def get_python_mesh_type(h5, path):
    kind = h5[path+'/kind']
    if kind == 'MATSUBARA':
        positive_only = h5[path+'/positive_only']
        if positive_only == 0:
            return 'MatsubaraPN'
        elif positive_only == 1:
            return 'MatsubaraP'
        else:
            raise RuntimeError("This mesh type is not supported by python wrapper: "+kind)
    elif kind == 'IMAGINARY_TIME':
        return 'ImaginaryTime'
    elif kind == 'LEGENDRE':
        return 'Legendre'
    elif kind == 'INDEX':
        return 'Index'
    elif kind == 'NUMERICAL':
        return 'Numerical'
    else:
        raise RuntimeError("Unsupported mesh type in python wrapper: "+kind)

def get_python_gf_type(h5, path):
    N = h5[path+'/mesh/N']

    type_name = 'ALPSGF'+str(N)
    if h5[path+'/data@__complex__']:
        type_name += 'Complex'
    else:
        type_name += 'Real'

    for im in range(N):
        type_name += get_python_mesh_type(h5, path+'/mesh/'+str(im+1))
    return type_name

#Very ad hoc implementation.
def load_gf(file_name, path):
    f = alps.hdf5.archive(file_name, 'r')
    python_name = get_python_gf_type(f, path)
    gf = (globals()[python_name])()
    loader = globals()['load_'+python_name]
    loader(gf, file_name, path)
    return gf

def save_gf(gf, file_name, path):
    f = alps.hdf5.archive(file_name, 'w')
    saver = globals()['save_'+ gf.__class__.__name__]
    saver(gf, file_name, path)


def save_version(ar, path):
    return _gf.save_version(ar, path)
save_version = _gf.save_version

def check_version(ar, path):
    return _gf.check_version(ar, path)
check_version = _gf.check_version
BOSONIC = _gf.BOSONIC
FERMIONIC = _gf.FERMIONIC
POSITIVE_NEGATIVE = _gf.POSITIVE_NEGATIVE
POSITIVE_ONLY = _gf.POSITIVE_ONLY
class base_mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, base_mesh, name)
    __repr__ = _swig_repr

    def points(self):
        return _gf.base_mesh_points(self)

    def __init__(self):
        this = _gf.new_base_mesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gf.delete_base_mesh
    __del__ = lambda self: None
base_mesh_swigregister = _gf.base_mesh_swigregister
base_mesh_swigregister(base_mesh)
cvar = _gf.cvar
minor_version = cvar.minor_version
major_version = cvar.major_version

class real_frequency_mesh(base_mesh):
    __swig_setmethods__ = {}
    for _s in [base_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, real_frequency_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [base_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, real_frequency_mesh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gf.new_real_frequency_mesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def extent(self):
        return _gf.real_frequency_mesh_extent(self)

    def __call__(self, idx):
        return _gf.real_frequency_mesh___call__(self, idx)

    def save(self, ar, path):
        return _gf.real_frequency_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.real_frequency_mesh_load(self, ar, path)

    def __eq__(self, mesh):
        return _gf.real_frequency_mesh___eq__(self, mesh)

    def __ne__(self, mesh):
        return _gf.real_frequency_mesh___ne__(self, mesh)
    __swig_destroy__ = _gf.delete_real_frequency_mesh
    __del__ = lambda self: None
real_frequency_mesh_swigregister = _gf.real_frequency_mesh_swigregister
real_frequency_mesh_swigregister(real_frequency_mesh)

class itime_mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itime_mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itime_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_itime_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, idx):
        return _gf.itime_mesh___call__(self, idx)

    def extent(self):
        return _gf.itime_mesh_extent(self)

    def __eq__(self, mesh):
        return _gf.itime_mesh___eq__(self, mesh)

    def beta(self):
        return _gf.itime_mesh_beta(self)

    def statistics(self):
        return _gf.itime_mesh_statistics(self)

    def points(self):
        return _gf.itime_mesh_points(self)

    def __ne__(self, mesh):
        return _gf.itime_mesh___ne__(self, mesh)

    def save(self, ar, path):
        return _gf.itime_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.itime_mesh_load(self, ar, path)

    def compute_points(self):
        return _gf.itime_mesh_compute_points(self)
    __swig_destroy__ = _gf.delete_itime_mesh
    __del__ = lambda self: None
itime_mesh_swigregister = _gf.itime_mesh_swigregister
itime_mesh_swigregister(itime_mesh)

class power_mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, power_mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, power_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_power_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, idx):
        return _gf.power_mesh___call__(self, idx)

    def extent(self):
        return _gf.power_mesh_extent(self)

    def power(self):
        return _gf.power_mesh_power(self)

    def uniform(self):
        return _gf.power_mesh_uniform(self)

    def __eq__(self, mesh):
        return _gf.power_mesh___eq__(self, mesh)

    def beta(self):
        return _gf.power_mesh_beta(self)

    def statistics(self):
        return _gf.power_mesh_statistics(self)

    def points(self):
        return _gf.power_mesh_points(self)

    def weights(self):
        return _gf.power_mesh_weights(self)

    def __ne__(self, mesh):
        return _gf.power_mesh___ne__(self, mesh)

    def save(self, ar, path):
        return _gf.power_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.power_mesh_load(self, ar, path)

    def compute_points(self):
        return _gf.power_mesh_compute_points(self)

    def compute_weights(self):
        return _gf.power_mesh_compute_weights(self)
    __swig_destroy__ = _gf.delete_power_mesh
    __del__ = lambda self: None
power_mesh_swigregister = _gf.power_mesh_swigregister
power_mesh_swigregister(power_mesh)

class momentum_realspace_index_mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, momentum_realspace_index_mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, momentum_realspace_index_mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def extent(self):
        return _gf.momentum_realspace_index_mesh_extent(self)

    def dimension(self):
        return _gf.momentum_realspace_index_mesh_dimension(self)

    def kind(self):
        return _gf.momentum_realspace_index_mesh_kind(self)

    def __eq__(self, mesh):
        return _gf.momentum_realspace_index_mesh___eq__(self, mesh)

    def __ne__(self, mesh):
        return _gf.momentum_realspace_index_mesh___ne__(self, mesh)

    def points(self):
        return _gf.momentum_realspace_index_mesh_points(self)

    def save(self, ar, path):
        return _gf.momentum_realspace_index_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.momentum_realspace_index_mesh_load(self, ar, path)
    __swig_destroy__ = _gf.delete_momentum_realspace_index_mesh
    __del__ = lambda self: None
momentum_realspace_index_mesh_swigregister = _gf.momentum_realspace_index_mesh_swigregister
momentum_realspace_index_mesh_swigregister(momentum_realspace_index_mesh)

class momentum_index_mesh(momentum_realspace_index_mesh):
    __swig_setmethods__ = {}
    for _s in [momentum_realspace_index_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, momentum_index_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [momentum_realspace_index_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, momentum_index_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_momentum_index_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, idx):
        return _gf.momentum_index_mesh___call__(self, idx)
    __swig_destroy__ = _gf.delete_momentum_index_mesh
    __del__ = lambda self: None
momentum_index_mesh_swigregister = _gf.momentum_index_mesh_swigregister
momentum_index_mesh_swigregister(momentum_index_mesh)

class real_space_index_mesh(momentum_realspace_index_mesh):
    __swig_setmethods__ = {}
    for _s in [momentum_realspace_index_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, real_space_index_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [momentum_realspace_index_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, real_space_index_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_real_space_index_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, idx):
        return _gf.real_space_index_mesh___call__(self, idx)
    __swig_destroy__ = _gf.delete_real_space_index_mesh
    __del__ = lambda self: None
real_space_index_mesh_swigregister = _gf.real_space_index_mesh_swigregister
real_space_index_mesh_swigregister(real_space_index_mesh)

class index_mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, index_mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, index_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_index_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def extent(self):
        return _gf.index_mesh_extent(self)

    def __call__(self, idx):
        return _gf.index_mesh___call__(self, idx)

    def points(self):
        return _gf.index_mesh_points(self)

    def throw_if_empty(self):
        return _gf.index_mesh_throw_if_empty(self)

    def __eq__(self, mesh):
        return _gf.index_mesh___eq__(self, mesh)

    def __ne__(self, mesh):
        return _gf.index_mesh___ne__(self, mesh)

    def save(self, ar, path):
        return _gf.index_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.index_mesh_load(self, ar, path)

    def compute_points(self):
        return _gf.index_mesh_compute_points(self)
    __swig_destroy__ = _gf.delete_index_mesh
    __del__ = lambda self: None
index_mesh_swigregister = _gf.index_mesh_swigregister
index_mesh_swigregister(index_mesh)

class legendre_mesh(base_mesh):
    __swig_setmethods__ = {}
    for _s in [base_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, legendre_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [base_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, legendre_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_legendre_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def extent(self):
        return _gf.legendre_mesh_extent(self)

    def __call__(self, idx):
        return _gf.legendre_mesh___call__(self, idx)

    def __eq__(self, mesh):
        return _gf.legendre_mesh___eq__(self, mesh)

    def __ne__(self, mesh):
        return _gf.legendre_mesh___ne__(self, mesh)

    def beta(self):
        return _gf.legendre_mesh_beta(self)

    def statistics(self):
        return _gf.legendre_mesh_statistics(self)

    def swap(self, other):
        return _gf.legendre_mesh_swap(self, other)

    def save(self, ar, path):
        return _gf.legendre_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.legendre_mesh_load(self, ar, path)

    def check_range(self):
        return _gf.legendre_mesh_check_range(self)

    def compute_points(self):
        return _gf.legendre_mesh_compute_points(self)
    __swig_destroy__ = _gf.delete_legendre_mesh
    __del__ = lambda self: None
legendre_mesh_swigregister = _gf.legendre_mesh_swigregister
legendre_mesh_swigregister(legendre_mesh)

class can_have_tail_yes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, can_have_tail_yes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, can_have_tail_yes, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gf.new_can_have_tail_yes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gf.delete_can_have_tail_yes
    __del__ = lambda self: None
can_have_tail_yes_swigregister = _gf.can_have_tail_yes_swigregister
can_have_tail_yes_swigregister(can_have_tail_yes)

class can_have_tail_no(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, can_have_tail_no, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, can_have_tail_no, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gf.new_can_have_tail_no()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gf.delete_can_have_tail_no
    __del__ = lambda self: None
can_have_tail_no_swigregister = _gf.can_have_tail_no_swigregister
can_have_tail_no_swigregister(can_have_tail_no)


def __lshift__(s, data):
    return _gf.__lshift__(s, data)
__lshift__ = _gf.__lshift__
class ALPSComplexGF3MatsubaraPIndexIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ALPSComplexGF3MatsubaraPIndexIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ALPSComplexGF3MatsubaraPIndexIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_ALPSComplexGF3MatsubaraPIndexIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def mesh1(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_mesh1(self)

    def mesh2(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_mesh2(self)

    def mesh3(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_mesh3(self)

    def data(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_data(self)

    def __call__(self, *args):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex___call__(self, *args)

    def initialize(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_initialize(self)

    def norm(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_norm(self)

    def __iadd__(self, rhs):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex___isub__(self, rhs)

    def __imul__(self, scalar):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex___imul__(self, scalar)

    def __itruediv__(self, *args):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex___neg__(self)

    def save(self, ar, path):
        return _gf.ALPSComplexGF3MatsubaraPIndexIndex_save(self, ar, path)
    __swig_destroy__ = _gf.delete_ALPSComplexGF3MatsubaraPIndexIndex
    __del__ = lambda self: None
ALPSComplexGF3MatsubaraPIndexIndex_swigregister = _gf.ALPSComplexGF3MatsubaraPIndexIndex_swigregister
ALPSComplexGF3MatsubaraPIndexIndex_swigregister(ALPSComplexGF3MatsubaraPIndexIndex)


def load_ALPSComplexGF3MatsubaraPIndexIndex(gf, file_name, path):
    return _gf.load_ALPSComplexGF3MatsubaraPIndexIndex(gf, file_name, path)
load_ALPSComplexGF3MatsubaraPIndexIndex = _gf.load_ALPSComplexGF3MatsubaraPIndexIndex

def save_ALPSComplexGF3MatsubaraPIndexIndex(gf, file_name, path):
    return _gf.save_ALPSComplexGF3MatsubaraPIndexIndex(gf, file_name, path)
save_ALPSComplexGF3MatsubaraPIndexIndex = _gf.save_ALPSComplexGF3MatsubaraPIndexIndex
class real_numerical_mesh(base_mesh):
    __swig_setmethods__ = {}
    for _s in [base_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, real_numerical_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [base_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, real_numerical_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_real_numerical_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def extent(self):
        return _gf.real_numerical_mesh_extent(self)

    def __call__(self, idx):
        return _gf.real_numerical_mesh___call__(self, idx)

    def __eq__(self, mesh):
        return _gf.real_numerical_mesh___eq__(self, mesh)

    def __ne__(self, mesh):
        return _gf.real_numerical_mesh___ne__(self, mesh)

    def beta(self):
        return _gf.real_numerical_mesh_beta(self)

    def statistics(self):
        return _gf.real_numerical_mesh_statistics(self)

    def basis_function(self, l):
        return _gf.real_numerical_mesh_basis_function(self, l)

    def swap(self, other):
        return _gf.real_numerical_mesh_swap(self, other)

    def save(self, ar, path):
        return _gf.real_numerical_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.real_numerical_mesh_load(self, ar, path)

    def compute_points(self):
        return _gf.real_numerical_mesh_compute_points(self)
    __swig_destroy__ = _gf.delete_real_numerical_mesh
    __del__ = lambda self: None
real_numerical_mesh_swigregister = _gf.real_numerical_mesh_swigregister
real_numerical_mesh_swigregister(real_numerical_mesh)

class real_piecewise_polynomial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, real_piecewise_polynomial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, real_piecewise_polynomial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_real_piecewise_polynomial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def order(self):
        return _gf.real_piecewise_polynomial_order(self)

    def num_sections(self):
        return _gf.real_piecewise_polynomial_num_sections(self)

    def section_edge(self, i):
        return _gf.real_piecewise_polynomial_section_edge(self, i)

    def section_edges(self):
        return _gf.real_piecewise_polynomial_section_edges(self)

    def coefficient(self, *args):
        return _gf.real_piecewise_polynomial_coefficient(self, *args)

    def set_zero(self):
        return _gf.real_piecewise_polynomial_set_zero(self)

    def compute_value(self, *args):
        return _gf.real_piecewise_polynomial_compute_value(self, *args)

    def find_section(self, x):
        return _gf.real_piecewise_polynomial_find_section(self, x)

    def __eq__(self, other):
        return _gf.real_piecewise_polynomial___eq__(self, other)

    def save(self, ar, path):
        return _gf.real_piecewise_polynomial_save(self, ar, path)

    def load(self, ar, path):
        return _gf.real_piecewise_polynomial_load(self, ar, path)
    __swig_destroy__ = _gf.delete_real_piecewise_polynomial
    __del__ = lambda self: None
real_piecewise_polynomial_swigregister = _gf.real_piecewise_polynomial_swigregister
real_piecewise_polynomial_swigregister(real_piecewise_polynomial)

class matsubara_positive_mesh(base_mesh):
    __swig_setmethods__ = {}
    for _s in [base_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, matsubara_positive_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [base_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, matsubara_positive_mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gf.new_matsubara_positive_mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def extent(self):
        return _gf.matsubara_positive_mesh_extent(self)

    def __call__(self, idx):
        return _gf.matsubara_positive_mesh___call__(self, idx)

    def __eq__(self, mesh):
        return _gf.matsubara_positive_mesh___eq__(self, mesh)

    def __ne__(self, mesh):
        return _gf.matsubara_positive_mesh___ne__(self, mesh)

    def beta(self):
        return _gf.matsubara_positive_mesh_beta(self)

    def statistics(self):
        return _gf.matsubara_positive_mesh_statistics(self)

    def positivity(self):
        return _gf.matsubara_positive_mesh_positivity(self)

    def swap(self, other):
        return _gf.matsubara_positive_mesh_swap(self, other)

    def save(self, ar, path):
        return _gf.matsubara_positive_mesh_save(self, ar, path)

    def load(self, ar, path):
        return _gf.matsubara_positive_mesh_load(self, ar, path)

    def check_range(self):
        return _gf.matsubara_positive_mesh_check_range(self)

    def compute_points(self):
        return _gf.matsubara_positive_mesh_compute_points(self)
    __swig_destroy__ = _gf.delete_matsubara_positive_mesh
    __del__ = lambda self: None
matsubara_positive_mesh_swigregister = _gf.matsubara_positive_mesh_swigregister
matsubara_positive_mesh_swigregister(matsubara_positive_mesh)

# This file is compatible with both classic and new-style classes.


